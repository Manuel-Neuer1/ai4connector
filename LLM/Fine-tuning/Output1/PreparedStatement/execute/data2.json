{
  "examples": [
    {
      "id": "example_001",
      "instruction": "请根据以下要求生成一段Java代码，用于测试不同数据库连接器的行为差异。代码需要包含多种JDBC方法的调用，确保代码涵盖批处理操作、事务控制、SQL查询、结果集操作和性能测试等场景。",
      "input": {
        "database_type": "mysql",
        "url": "jdbc:mysql://localhost:3306/testdb?user=root&password=1234",
        "table_structure": "CREATE TABLE table_name(id BOOL PRIMARY KEY,value FLOAT);",
        "requirements": {
          "allowed_classes": ["DriverManager", "Connection", "Statement", "PreparedStatement", "ResultSet"],
          "allowed_methods": {
            "DriverManager": ["getConnection"],
            "Connection": [],
            "Statement": [],
            "Connection": [],
            "PreparedStatement": [],
            "ResultSet": []
          },
          "scenarios": [
            "Batch operations: Test addBatch, executeBatch, executeLargeBatch with large data.",
            "Transaction control: Use commit, rollback, and nested Savepoints.",
            "SQL queries: Run SELECT, UPDATE, INSERT with WHERE conditions.",
            "ResultSet operations: Iterate large result sets for cursor performance.",
            "Performance: Test setFetchSize and query response time."
          ],
          "errors": "Simulate exceptions (e.g., duplicate keys, constraint violations) and cursor behavior."
        },
        "code_template": [
          "Connection conn = null;",
          "Statement stmt = null;",
          "PreparedStatement pstmt = null;",
          "ResultSet rs = null;",
          "Savepoint savepoint = null;",
          "conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/testdb0?user=root&password=1234\");"
        ]
      },
      "output": [
          "Connection con = null;\nStatement stmt = null;\nResultSet rs = null;\nSavepoint sp = null;\n\ncon = DriverManager.getConnection(\"jdbc:mysql://localhost:3366/testdb?user=root&password=1234\");\nstmt = con.createStatement(1003, 1007, 1);\nstmt.addBatch(\"CREATE TABLE table_name(id BOOL PRIMARY KEY,value FLOAT);\");\n\tstmt.executeBatch();\n\tcon.rollback();\nstmt = con.prepareStatement(\"INSERT INTO table_name VALUES(?, ?);\", 1005, 1008, 1);\n\tstmt.setMaxRows(2147483647);\n\tstmt.setQueryTimeout(-1);\nstmt.closeOnCompletion();\nstmt = con.createStatement(1003, 1007, 1);\ncon.setAutoCommit(true);\nstmt.getMaxFieldSize();\nstmt.addBatch(\"DELETE FROM table_name WHERE (table_name.value > 0.9138943+0.8626763);\");\nArrays.toString(stmt.executeLargeBatch());\nstmt.closeOnCompletion();\ncon.getHoldability();\nstmt = con.createStatement(1005, 1008, 2);\nstmt.setEscapeProcessing(false);\nstmt.setFetchDirection(1001);\nstmt.addBatch(\"INSERT INTO table_name VALUES(1585500222, 0.97174686)\");\nstmt.addBatch(\"DELETE FROM table_name WHERE (table_name.id >= -522243637);\");\nstmt.addBatch(\"INSERT INTO table_name VALUES(1838076687, 0.1527803)\");\n\tstmt.executeBatch();\nstmt.getResultSetConcurrency();\nstmt.getResultSetConcurrency();\nstmt = con.prepareStatement(\"INSERT INTO table_name VALUES(?, ?);\", 1003, 1007, 1);\nstmt.setFetchSize(873640457);\nstmt.getResultSetConcurrency();\n\tstmt.executeUpdate(\"UPDATE table_name SET value = 0.32612932 WHERE (table_name.id = -736235443) OR (table_name.id = -1960043638*-2112998523*-1152389005);\", 1);\nstmt = con.prepareStatement(\"INSERT INTO table_name VALUES(?, ?);\", 1004, 1007, 1);\n\tstmt.executeLargeUpdate(\"INSERT INTO table_name VALUES(790123336, 0.5627769)\", 2);\n\tcon.commit();\nstmt = con.prepareStatement(\"SELECT table_name.id FROM table_name WHERE table_name.id <= ?\", 1003, 1008, 2);\nstmt.setQueryTimeout(1438482620);\nstmt.setObject(1, \"0.4441499\");\n\tstmt.execute(); // ERROR\nstmt.getFetchSize();\ncon.setTransactionIsolation(2);\n\tstmt.executeUpdate(\"DELETE FROM table_name WHERE (table_name.value = 0.49418133) OR (table_name.id < 1878633950);\", 2);\n\tstmt.setMaxRows(979742454);\nstmt.setQueryTimeout(284797468);\n\trs = stmt.executeQuery(\"SELECT id, value FROM table_name;\"); // ERROR\ncon.isReadOnly();\nrs.next(); // ERROR\n\trs.updateObject(1, 0.21506971); // ERROR\n\trs.updateRow(); // ERROR\n\trs.rowUpdated();\nrs.isFirst(); // ERROR\n\trs = stmt.executeQuery(\"SELECT id, value FROM table_name;\"); // ERROR\n\tcon.rollback(null);\ncon.close();\nstmt.close();\nrs.close(); // ERROR\n\n"

      ],
      "metadata": {
        "difficulty": "hard",
        "description": "生成包含特定错误的JDBC代码，用于检测数据库连接器的bug，并正确使用JDBC方法。"
      }
    }
  ]
}