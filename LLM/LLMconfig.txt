首先OB只支持 ResultSet.TYPE_FORWARD_ONLY
因此以下的结果：
            con.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
            System.out.println("here: " + con.getHoldability()); //这里输出为 1
ResultSet.HOLD_CURSORS_OVER_COMMIT (值为 1) 表示结果集在事务提交后仍然保持打开状态。这是大多数数据库的默认行为。
ResultSet.CLOSE_CURSORS_AT_COMMIT (值为 2) 表示结果集在事务提交时会被自动关闭。
“可能是因为 OceanBase 的 JDBC 连接器对 setHoldability 方法的实现与 MySQL 或其他数据库有所不同。OceanBase 的 JDBC 连接器可能对 setHoldability 方法的实现进行了优化或限制，导致返回值为 1。
OceanBase 的 JDBC 连接器在事务提交时关闭游标的行为是默认的，这可能是为了确保事务的一致性和资源的有效管理。这种行为可能与 MySQL 的 JDBC 连接器有所不同，后者可能支持更多的保持能力选项。
”
因此对于ResultSet中的方法：
            boolean absolute()
            boolean first()
            boolean last()
            都是只返回true，这与实际情况不符合，即使是规定了了ResultSet.TYPE_FORWARD_ONLY，但是也需要返回应该正确的结果或者抛出异常
            这是JDK17 API文档给出的解释：
            “抛出：
             SQLException - 如果发生数据库访问错误；在关闭的结果集上调用此方法或结果集类型为 TYPE_FORWARD_ONLY
             SQLFeatureNotSupportedException - 如果 JDBC 驱动程序不支持此方法”







目前在服务器里配置了qwen2.5-coder:7b模型
https://blog.csdn.net/su_xiao_wei/article/details/146419463
上面这个博客很有用，目前是配置的自启动ollama

在qwen2.5_coder_7b_Modelfile中添加下面的参数，第一个是整个会话过程中的最大token数，第二个是每次生成的最大token数
PARAMETER num_ctx 32768
PARAMETER num_predict 20480

ollama run qwen2.5-coder 启动大模型


下载Anaconda3-2024.10-1-Linux-x86_64.sh
wget https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh


星期一：
微调的意义：
原本有问题的数据集去微调LLM是让LLM知道哪里可能产生问题，这样LLM就会在生成答案的时候更加关注这些地方，从而生成更加准确的答案。
另外是如果单纯让LLM去生成代码，LLM可能会出现幻觉的情况，因此微调可以让LLM更加专注于代码的生成，从而生成更加准确的代码。
但是需要解决的一个问题就是SQL语句的生成，这个很重要

现在搞了一个数据集，即Fine-tuning/Output1/ResultSet/afterLast/1.txt 关键代码大概在50行左右，对于一些方法的参数设置我觉得可以自己写方法去设置

2025-04-07
今天就想如何去设计微调格式，生成了大概的格式，搞了6个json文件，但是微调肯定要200+个文件起步效果会好一些，打算搞100个时候去微调一下llm试试效果
批改lab的报告

2025-04-08
还是做了一些文件的处理，但是仔细想了想似乎这种方式不太可行，因为这个数据集不是标准的数据集，并且不知道训练的效果怎么样，而且无法解决LLM的幻觉问题，并且这种方式想大规模测试也有点不知所措

/*else {
                    // 判断是不是setFetchSize调用getNextInt方法
                    if (trimmedLine.contains("setFetchSize")) {
                        // 找到左括号位置
                        int leftBracket = trimmedLine.indexOf("setFetchSize(") + "setFetchSize(".length();
                        // 找到右括号位置
                        int rightBracket = trimmedLine.indexOf(")", leftBracket);

                        if (leftBracket > 0 && rightBracket > leftBracket) {
                            // 构建新行：保留左括号前的部分 + random.nextInt(1000) + 保留右括号后的部分
                            String prefix = line.substring(0, line.indexOf("setFetchSize(") + "setFetchSize(".length());
                            String suffix = line.substring(line.indexOf(")", line.indexOf("setFetchSize(")) + 1);

                            // 使用random.nextInt()替换原参数
                            // 但是这里也要修改一下，有20%的可能直接使用Intger.MIN_VALUE,有50%的可能使用[0,Intger.MAX_VALUE],有30%的可能使用random.nextInt()
                            int randomValue = random.nextInt(100);
                            String newLine = "";
                            if (randomValue < 20) {
                                newLine = prefix + Integer.MIN_VALUE + suffix;
                            } else if (randomValue < 70) {
                                String insertStr = String.format("%03d",
                                        random.nextInt(Integer.MAX_VALUE));
                                newLine = prefix + insertStr + suffix;
                            } else {
                                newLine = prefix + random.nextInt() + suffix;
                            }
                            rewrittenLines.add(newLine);
                        } else {
                            // 无法找到括号位置，保留原行
                            rewrittenLines.add(line);
                        }
                    }*/



