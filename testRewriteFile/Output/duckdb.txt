import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class JdbcTest {

    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/test18?user=root&password=1234";

        try {
            // 注册驱动
            Class.forName("com.mysql.cj.jdbc.Driver");

            // 获取连接
            Connection connection = DriverManager.getConnection(url);

            // 禁用自动提交
            connection.setAutoCommit(false);

            // 设置事务隔离级别
            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);

            // 创建 Statement
            Statement statement = connection.createStatement();

            // 设置查询超时时间
            statement.setQueryTimeout(30);

            // 执行查询
            ResultSet resultSet = statement.executeQuery("SELECT * FROM table0_0");

            // 设置 ResultSet 的获取大小
            resultSet.setFetchSize(10);

            // 遍历 ResultSet
            while (resultSet.next()) {
                double id = resultSet.getDouble("Id");
                String value0 = resultSet.getString("Value0");
                String value1 = resultSet.getString("Value1");
                double value2 = resultSet.getDouble("Value2");

                System.out.println("Id: " + id + ", Value0: " + value0 + ", Value1: " + value1 + ", Value2: " + value2);
            }

            // 关闭 ResultSet
            resultSet.close();

            // 创建 PreparedStatement
            PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO table0_0 (Id, Value0, Value1, Value2) VALUES (?, ?, ?, ?)");

            // 设置参数
            preparedStatement.setDouble(1, 1.0);
            preparedStatement.setString(2, "test0");
            preparedStatement.setString(3, "test1");
            preparedStatement.setDouble(4, 123.45);

            // 执行更新
            int updateCount = preparedStatement.executeUpdate();

            System.out.println("Update count: " + updateCount);

            // 批量操作
            List<Object[]> batchData = new ArrayList<>();
            batchData.add(new Object[]{2.0, "test2", "test3", 678.90});
            batchData.add(new Object[]{3.0, "test4", "test5", 12.34});

            for (Object[] data : batchData) {
                preparedStatement.setDouble(1, (Double) data[0]);
                preparedStatement.setString(2, (String) data[1]);
                preparedStatement.setString(3, (String) data[2]);
                preparedStatement.setDouble(4, (Double) data[3]);
                preparedStatement.addBatch();
            }

            // 执行批量更新
            int[] batchUpdateCounts = preparedStatement.executeBatch();

            System.out.println("Batch update counts: " + java.util.Arrays.toString(batchUpdateCounts));

            // 获取生成的键
            ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
            while (generatedKeys.next()) {
                System.out.println("Generated key: " + generatedKeys.getLong(1));
            }
            generatedKeys.close();

            // 关闭 PreparedStatement
            preparedStatement.close();

            // 提交事务
            connection.commit();

            // 回滚事务
            connection.rollback();

            // 创建保存点
            Savepoint savepoint = connection.setSavepoint("savepoint1");

            // 再次执行更新
            statement.executeUpdate("UPDATE table0_0 SET Value0 = 'updated' WHERE Id = 1");

            // 回滚到保存点
            connection.rollback(savepoint);

            // 删除保存点
            connection.releaseSavepoint(savepoint);

            // 获取结果集
            resultSet = statement.executeQuery("SELECT * FROM table0_0");

            // 设置获取方向
            resultSet.setFetchDirection(ResultSet.FETCH_FORWARD);

            // 遍历 ResultSet
            while (resultSet.next()) {
                System.out.println("Id: " + resultSet.getDouble("Id"));
            }

            // 移动到第一行之前
            resultSet.beforeFirst();

            // 检查是否在第一行之前
            System.out.println("Is before first: " + resultSet.isBeforeFirst());

            // 移动到第一行
            resultSet.next();

            // 更新行
            resultSet.updateObject("Value0", "new_value");
            resultSet.updateRow();

            // 移动到最后一行之后
            resultSet.afterLast();

            // 检查是否在最后一行之后
            System.out.println("Is after last: " + resultSet.isAfterLast());

            // 关闭 Statement
            statement.close();

            // 关闭连接
            connection.close();

            // 再次获取连接
            connection = DriverManager.getConnection(url);

            // 再次创建 Statement
            statement = connection.createStatement();

            // 再次执行查询
            resultSet = statement.executeQuery("SELECT * FROM table0_0");

            // 再次遍历 ResultSet
            while (resultSet.next()) {
                System.out.println("Id: " + resultSet.getDouble("Id"));
            }

            // 再次关闭 ResultSet
            resultSet.close();

            // 再次创建 PreparedStatement
            preparedStatement = connection.prepareStatement("INSERT INTO table0_0 (Id, Value0, Value1, Value2) VALUES (?, ?, ?, ?)");

            // 再次设置参数
            preparedStatement.setDouble(1, 4.0);
            preparedStatement.setString(2, "test6");
            preparedStatement.setString(3, "test7");
            preparedStatement.setDouble(4, 90.12);

            // 再次执行更新
            updateCount = preparedStatement.executeUpdate();

            System.out.println("Update count: " + updateCount);

            // 再次批量操作
            batchData.clear();
            batchData.add(new Object[]{5.0, "test8", "test9", 34.56});
            batchData.add(new Object[]{6.0, "test10", "test11", 78.90});

            for (Object[] data : batchData) {
                preparedStatement.setDouble(1, (Double) data[0]);
                preparedStatement.setString(2, (String) data[1]);
                preparedStatement.setString(3, (String) data[2]);
                preparedStatement.setDouble(4, (Double) data[3]);
                preparedStatement.addBatch();
            }

            // 再次执行批量更新
            batchUpdateCounts = preparedStatement.executeBatch();

            System.out.println("Batch update counts: " + java.util.Arrays.toString(batchUpdateCounts));

            // 再次获取生成的键
            generatedKeys = preparedStatement.getGeneratedKeys();
            while (generatedKeys.next()) {
                System.out.println("Generated key: " + generatedKeys.getLong(1));
            }
            generatedKeys.close();

            // 再次关闭 PreparedStatement
            preparedStatement.close();

            // 再次提交事务
            connection.commit();

            // 再次回滚事务
            connection.rollback();

            // 再次创建保存点
            savepoint = connection.setSavepoint("savepoint2");

            // 再次执行更新
            statement.executeUpdate("UPDATE table0_0 SET Value0 = 'updated_again' WHERE Id = 2");

            // 再次回滚到保存点
            connection.rollback(savepoint);

            // 再次删除保存点
            connection.releaseSavepoint(savepoint);

            // 再次获取结果集
            resultSet = statement.executeQuery("SELECT * FROM table0_0");

            // 再次设置获取方向
            resultSet.setFetchDirection(ResultSet.FETCH_REVERSE);

            // 再次遍历 ResultSet
            while (resultSet.next()) {
                System.out.println("Id: " + resultSet.getDouble("Id"));
            }

            // 再次移动到第一行之前
            resultSet.beforeFirst();

            // 再次检查是否在第一行之前
            System.out.println("Is before first: " + resultSet.isBeforeFirst());

            // 再次移动到第一行
            resultSet.next();

            // 再次更新行
            resultSet.updateObject("Value0", "new_value_again");
            resultSet.updateRow();

            // 再次移动到最后一行之后
            resultSet.afterLast();

            // 再次检查是否在最后一行之后
            System.out.println("Is after last: " + resultSet.isAfterLast());

            // 再次关闭 Statement
            statement.close();

            // 再次关闭连接
            connection.close();

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }
}