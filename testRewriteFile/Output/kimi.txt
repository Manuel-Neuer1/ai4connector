import java.sql.*;

public class JdbcTest {

    public static void main(String[] args) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        Savepoint sp = null;


            // 获取连接
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/test18?user=root&password=1234");

            // 创建 Statement
            stmt = con.createStatement(1004, 1008, 1);
            stmt.executeUpdate("DROP TABLE IF EXISTS table18_0;");
            stmt.executeLargeUpdate("CREATE TABLE table18_0(id VARCHAR(100) PRIMARY KEY, value VARCHAR(100));", 1);
            stmt.closeOnCompletion();

            stmt = con.createStatement(1005, 1007, 2);
            stmt.addBatch("DELETE FROM table18_0 WHERE (table18_0.value > '0');");
            stmt.executeLargeBatch();

            con.commit();

            sp = con.setSavepoint();

            stmt = con.prepareStatement("INSERT INTO table18_0 VALUES(?, ?);", 1005, 1008, 2);
            con.setAutoCommit(true);
            stmt.closeOnCompletion();

            stmt = con.createStatement(1003, 1007, 2);
            stmt.addBatch("DELETE FROM table18_0 WHERE (table18_0.id <> 'test') AND (table18_0.value = 'test');");
            stmt.addBatch("UPDATE table18_0 SET value = 'updated' WHERE (table18_0.id != 'test') OR (table18_0.value >= 'test');");
            stmt.addBatch("DELETE FROM table18_0 WHERE (table18_0.id >= 'test');");
            stmt.executeLargeBatch();

            stmt = con.prepareStatement("SELECT table18_0.value FROM table18_0 WHERE table18_0.value = ?", 1005, 1007, 1);
            stmt.setFetchSize(100);
            stmt.closeOnCompletion();

            con.setAutoCommit(true);

            stmt = con.createStatement(1003, 1007, 1);
            stmt.getFetchDirection();
            stmt.setFetchSize(100);
            stmt.executeLargeUpdate("UPDATE table18_0 SET value = 'updated' WHERE (table18_0.id = 'test');", 1);

            rs = stmt.getGeneratedKeys();
            rs.next();

            rs.getHoldability();
            rs.updateObject(2, "test");
            rs.isFirst();
            rs.cancelRowUpdates();

            con.setTransactionIsolation(2);
            rs.previous();

            rs = stmt.executeQuery("SELECT id, value FROM table18_0 WHERE (table18_0.value != 'test');");
            con.commit();
            rs.next();
            stmt.getResultSetConcurrency();

            rs = stmt.executeQuery("SELECT id, value FROM table18_0;");
            rs.isAfterLast();
            rs.getType();
            rs.next();

            rs.updateObject(2, "test");
            rs.getType();
            rs.cancelRowUpdates();
            stmt.getResultSetType();

            rs.updateObject(2, "test");
            con.commit();
            con.getHoldability();
            rs.updateRow();
            rs.beforeFirst();

            con.setAutoCommit(true);
            rs.next();
            rs.setFetchDirection(1000);
            rs.updateObject(2, "test");
            stmt.getMoreResults(3);
            stmt.getUpdateCount();
            rs.updateRow();
            rs.afterLast();

            rs.isLast();
            rs.updateObject(1, "test");
            con.rollback();

            rs.isAfterLast();
            rs.cancelRowUpdates();
            con.getHoldability();
            stmt.executeLargeUpdate("INSERT INTO table18_0 VALUES('test', 'test')", 2);

            rs = stmt.executeQuery("SELECT id, value FROM table18_0;");
            rs.next();
            rs.updateObject(1, "test");
            rs.updateRow();
            rs.beforeFirst();

            rs.getHoldability();
            rs.next();
            rs.isFirst();
            con.rollback();
            rs = stmt.executeQuery("SELECT id, value FROM table18_0 WHERE (table18_0.id <= 'test') OR (table18_0.id <> 'test');");
            stmt.getMoreResults(1);
            rs.isAfterLast();
            rs.next();
            rs.updateObject(2, "test");
            rs.getType();
            rs.cancelRowUpdates();
            rs.updateObject(1, "test");
            stmt.getResultSetConcurrency();
            rs.updateRow();
            stmt.executeLargeUpdate("INSERT INTO table18_0 VALUES('test', 'test')", 2);
            con.getHoldability();
            rs.beforeFirst();
            con.setTransactionIsolation(1);
            stmt.getResultSetConcurrency();
            rs.next();
            con.getNetworkTimeout();
            rs.beforeFirst();
            con.setAutoCommit(true);
            con.isReadOnly();
            rs.next();
            con.rollback(sp);
            rs.afterLast();
            rs.updateObject(1, "test");

            // 关闭资源
            con.close();
            stmt.close();
            rs.close();
    }
}